#!/usr/bin/ruby

require "git"
require "octokit"
require "csv"

TILE_ATTRIBUTION_FILE = "tile-attribution.csv"
gitdir = Dir.pwd

def log_message(message)
  puts "#{Time.now}: #{message}"
end

def generate_commit_message(git)
  diff_output = git.diff('HEAD', TILE_ATTRIBUTION_FILE).patch
  change_lines = diff_output.lines.select { |line| line.start_with?('+') || line.start_with?('-') }

  # Filter out diff metadata lines (which start with '+ ' or '- ')
  change_lines.reject! { |line| line =~ /^(\+ |- )/ }

  return "Updated #{TILE_ATTRIBUTION_FILE}" if change_lines.empty?

  last_change = change_lines.last

  if last_change.start_with?('+')
    action = "Added"
    content = last_change[1..].strip.split(',')[0] # Assuming the first CSV column contains the desired content
  elsif last_change.start_with?('-')
    action = "Removed"
    content = last_change[1..].strip.split(',')[0]
  else
    return "Updated #{TILE_ATTRIBUTION_FILE}"
  end

  "#{action} #{content} to #{TILE_ATTRIBUTION_FILE}"
end

git = Git.open(gitdir)

git.config("user.name", "Tile-Attribution Updater")
git.config("user.email", "admins@openstreetmap.org")

# GitHub repository in the format "owner/repo"
repo = ENV["GITHUB_REPOSITORY"]
branch = ENV["GITHUB_REF_NAME"]

# Pull all changes
log_message("Pulling changes from #{branch}...")
git.fetch("origin")
git.reset_hard("origin/#{branch}")

client = Octokit::Client.new(bearer_token: ENV["GITHUB_TOKEN"])
client.auto_paginate = true
issues = client.issues(repo, state: "open", labels: "accepted")

CSV.open(TILE_ATTRIBUTION_FILE, "w") do |csv|
  csv << ["title", "link", "date"]
  issues.each do |issue|
    csv << [issue.title, issue.html_url, issue.created_at]
  end
end

if git.status.changed.include?(TILE_ATTRIBUTION_FILE)
  log_message("Add #{TILE_ATTRIBUTION_FILE} to git")
  git.add(TILE_ATTRIBUTION_FILE)

  commit_message = generate_commit_message(git)
  log_message("Commit changes to #{branch} with message: '#{commit_message}'")
  git.commit(commit_message)

  log_message("Push branch #{branch}...")
  git.push("origin", branch)
end
